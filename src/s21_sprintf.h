#ifndef SRC_S21_SPRINTF_H_
#define SRC_S21_SPRINTF_H_

#include "s21_string.h"

#define BUFF_SIZE 512

typedef struct {
  int minus;
  int plus;
  int space;
  int zero;
  int hash;
  int precision;
  int is_precision_set;
  int width;
  char length;
  char specifier;
} flgs;

/**
 * @brief Функция форматированного вывода в строку.
 *
 * Эта функция аналогична стандартной sprintf и позволяет
 * форматировать строку с использованием заданного формата и переменного
 * числа аргументов. Результат форматирования записывается в переданную строку.
 *
 * @param str Указатель на строку, в которую будет записан результат.
 * @param format Форматная строка, определяющая спецификации форматирования.
 * @param ... Переменное число аргументов для подстановки в формат.
 * @return Количество символов, записанных в строку (без учета завершающего
 * нуля).
 */
int s21_sprintf(char* str, const char* format, ...);
// parse format
/**
 * @brief Получение флагов из форматной строки.
 *
 * Эта функция извлекает флаги из форматной строки и сохраняет их в структуре
 * flgs.
 *
 * @param format Указатель на текущую позицию в форматной строке.
 * @param f Указатель на структуру flgs, в которую сохраняются флаги.
 * @return Указатель на следующую позицию в форматной строке после флагов.
 */
const char* getflags(const char* format, flgs* f);
/**
 * @brief Получение ширины из форматной строки.
 *
 * Эта функция извлекает ширину из форматной строки и сохраняет её в структуре
 * flgs.
 *
 * @param format Указатель на текущую позицию в форматной строке.
 * @param f Указатель на структуру flgs, в которую сохраняется ширина.
 * @param lst Указатель на список аргументов переменной длины.
 * @return Указатель на следующую позицию в форматной строке после ширины.
 */
const char* getwidth(const char* format, flgs* f, va_list lst);
/**
 * @brief Получение точности из форматной строки.
 *
 * Эта функция извлекает точность из форматной строки и сохраняет её в структуре
 * flgs.
 *
 * @param format Указатель на текущую позицию в форматной строке.
 * @param f Указатель на структуру flgs, в которую сохраняется точность.
 * @param lst Указатель на список аргументов переменной длины.
 * @return Указатель на следующую позицию в форматной строке после точности.
 */
const char* getprecision(const char* format, flgs* f, va_list lst);
/**
 * @brief Получение длины из форматной строки.
 *
 * Эта функция извлекает длину из форматной строки и сохраняет её в структуре
 * flgs.
 *
 * @param format Указатель на текущую позицию в форматной строке.
 * @param f Указатель на структуру flgs, в которую сохраняется длина.
 * @return Указатель на следующую позицию в форматной строке после длины.
 */
const char* getlength(const char* format, flgs* f);
// parse values
/**
 * @brief Обработка значения с учетом спецификатора формата.
 *
 * Эта функция обрабатывает значение, соответствующее текущему спецификатору
 * формата, и записывает результат в буфер.
 *
 * @param f Структура flgs, содержащая флаги форматирования.
 * @param buf Буфер, в который записывается обработанное значение.
 * @param lst Указатель на список аргументов переменной длины.
 */
void handle_val(flgs f, char* buf, va_list lst);
/**
 * @brief Обработка целочисленного значения для спецификаторов 'd' и 'i'.
 *
 * Эта функция преобразует целочисленное значение в строку и учитывает
 * флаги форматирования, точность и ширину.
 *
 * @param f Структура flgs, содержащая флаги форматирования.
 * @param buf Буфер, в который записывается обработанное значение.
 * @param lst Указатель на список аргументов переменной длины.
 */
void parse_int(flgs f, char* buf, va_list lst);
/**
 * @brief Обработка беззнакового целочисленного значения для спецификатора 'u'.
 *
 * Эта функция преобразует беззнаковое целочисленное значение в строку и
 * учитывает флаги форматирования, точность и ширину.
 *
 * @param f Структура flgs, содержащая флаги форматирования.
 * @param buf Буфер, в который записывается обработанное значение.
 * @param lst Указатель на список аргументов переменной длины.
 */
void parse_unsign(flgs f, char* buf, va_list lst);
/**
 * @brief Обработка восьмеричного целочисленного значения для спецификатора 'o'.
 *
 * Эта функция преобразует восьмеричное целочисленное значение в строку и
 * учитывает флаги форматирования, точность и ширину.
 *
 * @param f Структура flgs, содержащая флаги форматирования.
 * @param buf Буфер, в который записывается обработанное значение.
 * @param lst Указатель на список аргументов переменной длины.
 */
void parse_octal(flgs f, char* buf, va_list lst);
/**
 * @brief Обработка шестнадцатеричного целочисленного значения для
 * спецификаторов 'x' и 'X'.
 *
 * Эта функция преобразует шестнадцатеричное целочисленное значение в строку и
 * учитывает флаги форматирования, точность и ширину.
 *
 * @param f Структура flgs, содержащая флаги форматирования.
 * @param buf Буфер, в который записывается обработанное значение.
 * @param lst Указатель на список аргументов переменной длины.
 */
void parse_hex(flgs f, char* buf, va_list lst);
/**
 * @brief Обработка символьного значения для спецификатора 'c'.
 *
 * Эта функция обрабатывает символьное значение и учитывает
 * флаги форматирования, точность и ширину.
 *
 * @param f Структура flgs, содержащая флаги форматирования.
 * @param buf Буфер, в который записывается обработанное значение.
 * @param lst Указатель на список аргументов переменной длины.
 */
void parse_char(flgs f, char* buf, va_list lst);
/**
 * @brief Обработка строки символов для спецификатора 's'.
 *
 * Эта функция обрабатывает строку символов и учитывает
 * флаги форматирования, точность и ширину.
 *
 * @param f Структура flgs, содержащая флаги форматирования.
 * @param buf Буфер, в который записывается обработанное значение.
 * @param lst Указатель на список аргументов переменной длины.
 */
void parse_strg(flgs f, char* buf, va_list lst);
/**
 * @brief Обработка указателя для спецификатора 'p'.
 *
 * Эта функция обрабатывает указатель и учитывает
 * флаги форматирования, точность и ширину.
 *
 * @param f Структура flgs, содержащая флаги форматирования.
 * @param buf Буфер, в который записывается обработанное значение.
 * @param lst Указатель на список аргументов переменной длины.
 */
void parse_pointer(flgs f, char* buf, va_list lst);
/**
 * @brief Обработка числа с плавающей точкой для спецификатора 'f'.
 *
 * Эта функция обрабатывает число с плавающей точкой и учитывает
 * флаги форматирования, точность и ширину.
 *
 * @param f Структура flgs, содержащая флаги форматирования.
 * @param buf Буфер, в который записывается отформатированное значение.
 * @param lst Указатель на список аргументов переменной длины.
 */
void parse_float(flgs f, char* buf, va_list lst);
/**
 * @brief Обработка мантиссы числа с плавающей точкой для спецификатора 'e' или
 * 'E'.
 *
 * Эта функция обрабатывает мантиссу числа с плавающей точкой и учитывает
 * флаги форматирования, точность и ширину.
 *
 * @param f Структура flgs, содержащая флаги форматирования.
 * @param buf Буфер, в который записывается отформатированная мантисса.
 * @param lst Указатель на список аргументов переменной длины.
 */
void parse_mantiss(flgs f, char* buf, va_list lst);
/**
 * @brief Обработка числа с плавающей точкой для спецификатора 'g' или 'G'.
 *
 * Эта функция обрабатывает число с плавающей точкой и учитывает
 * флаги форматирования, точность и ширину для спецификаторов 'g' или 'G'.
 *
 * @param f Структура flgs, содержащая флаги форматирования.
 * @param buf Буфер, в который записывается отформатированное значение.
 * @param lst Указатель на список аргументов переменной длины.
 */
void parse_float_Gg(flgs f, char* buf, va_list lst);
// format values
/**
 * @brief Форматирование строки с учетом точности.
 *
 * Эта функция обрабатывает строку, учитывая точность, и обновляет её
 * содержимое.
 *
 * @param buf Буфер, представляющий строку для форматирования.
 * @param f Структура flgs, содержащая флаги форматирования.
 */
void format_precision(char* buf, flgs f);
/**
 * @brief Форматирование строки с учетом флагов.
 *
 * Эта функция обрабатывает строку, учитывая флаги форматирования, и обновляет
 * её содержимое.
 *
 * @param buf Буфер, представляющий строку для форматирования.
 * @param f Структура flgs, содержащая флаги форматирования.
 */
void format_flgs(char* buf, flgs f);
/**
 * @brief Форматирование широкого символа для спецификатора 'lc'.
 *
 * Эта функция форматирует широкий символ и учитывает
 * флаги форматирования, точность и ширину.
 *
 * @param f Структура flgs, содержащая флаги форматирования.
 * @param buf Буфер, в который записывается отформатированное значение.
 * @param w_c Широкий символ, который нужно отформатировать.
 */
void format_wchar(flgs f, char* buf, wchar_t w_c);
/**
 * @brief Форматирование символа для спецификатора 'c'.
 *
 * Эта функция форматирует символ и учитывает
 * флаги форматирования, точность и ширину.
 *
 * @param f Структура flgs, содержащая флаги форматирования.
 * @param buf Буфер, в который записывается отформатированное значение.
 * @param c Символ, который нужно отформатировать.
 */
void format_char(flgs f, char* buf, char c);
/**
 * @brief Форматирование строки символов для спецификатора 's'.
 *
 * Эта функция форматирует строку символов и учитывает
 * флаги форматирования, точность и ширину.
 *
 * @param f Структура flgs, содержащая флаги форматирования.
 * @param buf Буфер, в который записывается отформатированное значение.
 * @param str Строка символов, которую нужно отформатировать.
 */
void format_strg(flgs f, char* buf, char* str);
/**
 * @brief Форматирование широкой строки символов для спецификатора 'ls'.
 *
 * Эта функция форматирует широкую строку символов и учитывает
 * флаги форматирования, точность и ширину.
 *
 * @param f Структура flgs, содержащая флаги форматирования.
 * @param buf Буфер, в который записывается отформатированное значение.
 * @param wstr Широкая строка символов, которую нужно отформатировать.
 */
void format_wide_strg(flgs f, char* buf, wchar_t* wstr);
/**
 * @brief Форматирование числа для спецификатора 'g' или 'G'.
 *
 * Эта функция форматирует число с плавающей запятой в стандартной
 * или экспоненциальной форме для спецификаторов 'g' или 'G'.
 * Учитываются флаги форматирования, точность и ширина.
 *
 * @param buf Буфер, в который записывается отформатированное значение.
 * @param precision Точность форматирования.
 */
void format_gG_precision(char* buf, int precision);
// helper functions
/**
 * @brief Преобразование целого числа в строку.
 *
 * Эта функция преобразует целочисленное значение в строку в указанной
 * системе счисления и сохраняет результат в переданном буфере.
 *
 * @param val Целочисленное значение для преобразования.
 * @param ret Указатель на буфер, в который записывается результат.
 * @param base Система счисления.
 */
void whole_num_to_strg(int64_t val, char* ret, int base);
/**
 * @brief Проверка, является ли символ спецификатором целочисленного типа.
 *
 * @param c Символ для проверки.
 * @return 1, если символ - спецификатор целочисленного типа, иначе 0.
 */
int check_int_specifier(char c);
/**
 * @brief Преобразование беззнакового числа в строку.
 *
 * Эта функция преобразует беззнаковое целочисленное значение в строку
 * в указанной системе счисления и сохраняет результат в переданном буфере.
 *
 * @param val Беззнаковое целочисленное значение для преобразования.
 * @param ret Указатель на буфер, в который записывается результат.
 * @param base Система счисления.
 */
void unsigned_num_to_string(uint64_t val, char* ret, int base);
/**
 * @brief Преобразование символа в верхний регистр.
 *
 * Эта функция изменяет символ на соответствующий символ в верхнем регистре.
 *
 * @param str Указатель на строку, в которой нужно изменить регистр символа.
 */
void to_upper(char* str);
/**
 * @brief Проверка, состоит ли строка только из нулей.
 *
 * @param buf Указатель на строку для проверки.
 * @return 1, если строка состоит только из нулей, иначе 0.
 */
int is_all_zeroes(char* buf);
/**
 * @brief Добавление префикса '0x' к строке, если это необходимо.
 *
 * Эта функция добавляет префикс '0x' к строке, если строка не состоит только из
 * нулей или спецификатор формата равен 'p'.
 *
 * @param buf Указатель на строку, к которой добавляется префикс.
 * @param f Структура flgs, содержащая флаги форматирования.
 */
void prepend_ox(char* buf, flgs f);
/**
 * @brief Форматирование числа с плавающей точкой для спецификатора 'e' или 'E'.
 *
 * Эта функция форматирует число с плавающей точкой в экспоненциальной форме
 * и учитывает флаги форматирования, точность и ширину.
 *
 * @param val Число с плавающей точкой, которое нужно отформатировать.
 * @param ret Буфер, в который записывается отформатированное значение.
 * @param f Структура flgs, содержащая флаги форматирования.
 */
void double_strg(long double val, char* ret, flgs f);
/**
 * @brief Добавление мантиссы к отформатированному числу с плавающей запятой.
 *
 * Эта функция добавляет отформатированную мантиссу к отформатированному числу
 * с плавающей запятой, учитывая флаги форматирования.
 *
 * @param str Отформатированное число с плавающей запятой.
 * @param pow Показатель степени для мантиссы.
 * @param sign Знак мантиссы ('+' или '-').
 */
void prepend_mantiss(char* str, int pow, char sign);
/**
 * @brief Удаление завершающих нулей из строки.
 *
 * Эта функция удаляет завершающие нули из строки с числом,
 * чтобы получить более компактный результат.
 *
 * @param buf Строка с числом, из которой нужно удалить завершающие нули.
 */
void remove_trailing_zeroes(char* buf);
/**
 * @brief Проверка, является ли символ цифрой.
 *
 * Эта функция проверяет, является ли данный символ цифрой.
 *
 * @param c Символ для проверки.
 * @return Возвращает 1, если символ - цифра, иначе 0.
 */
int s21_isdigit(char c);

// int main()
// {
//     char str[BUFF_SIZE] = "\0";
//     s21_sprintf(str, "%d", 12);
//     return 0;
// }

#endif  //  SRC_S21_SPRINTF_H_
